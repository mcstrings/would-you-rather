{"version":3,"sources":["api/_DATA.js","actions/authedUser.js","actions/users.js","actions/questions.js","actions/shared.js","utils/index.js","components/Avatar.js","components/Welcome.js","components/Navigation.js","components/OptionStats.js","components/Option.js","components/Question.js","components/Questions.js","components/Leaderboard.js","components/QuestionDetail.js","components/NewQuestion.js","components/PageNotFound.js","components/Login.js","components/App.js","reducers/index.js","reducers/users.js","reducers/questions.js","reducers/authedUser.js","middleware/index.js","serviceWorker.js","index.js"],"names":["users","sarahedo","id","name","avatarURL","bigAvatarURL","answers","8xf0y6ziyjabvozdd253nd","6ni6ok3ym7mf1p33lnez","am8ehyc8byjqgar0jgpub9","loxhs1bqm25b708cmbf3g","questions","tylermcginnis","vthrdm985a262al8qx3do","xj352vofupe1dqz9emx13r","johndoe","author","timestamp","optionOne","votes","text","optionTwo","formatQuestion","_ref","optionOneText","optionTwoText","Math","random","toString","substring","Date","now","_saveQuestion","question","Promise","res","rej","authedUser","formattedQuestion","setTimeout","Object","objectSpread","defineProperty","concat","_saveQuestionAnswer","_ref2","qid","answer","SET_AUTHED_USER","setAuthedUser","type","handleSetAuthedUser","dispatch","RECEIVE_USERS","UPDATE_USER_QUESTIONS","UPDATE_USER_ANSWERS","receiveUsers","handleUpdateUserQuestions","updateUserQuestions","handleUpdateUserAnswers","authedUserID","uid","updateUserAnswers","RECEIVE_QUESTIONS","SAVE_QUESTION","SAVE_QUESTION_ANSWER","receiveQuestions","saveQuestion","saveQuestionAnswer","handleSaveQuestionAnswer","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","showLoading","t0","console","log","hideLoading","stop","this","_x","apply","arguments","handleAddQuestion","_callee2","newQuestion","_context2","sent","_x2","handleInitialData","getUsersAndQuestions","_ref3","all","slicedToArray","abrupt","_ref4","AUTHED_USER_ID","_ref5","_ref6","getUser","userID","length","undefined","user","getUserName","otherID","getArrayFromObj","obj","keys","map","key","isAuthedUsersAnswer","option","includes","isValidUserID","constructor","Avatar","_this$props","props","_this$props$className","className","react_default","createElement","src","getAvatar","alt","Component","Welcome","handleLogout","e","preventDefault","_this","history","push","_this$props2","react","Avatar_Avatar","Button","size","onClick","withRouter","connect","Navigation","Navbar","variant","bg","collapseOnSelect","expand","Toggle","Collapse","Nav","lib","exact","to","Link","active","components_Welcome","OptionStats","totalNumPeople","numOptionVotes","percentage","floor","Option","showForm","hasAuthedUserAnswered","handleRadioBtnClick","getOptionCheckbox","Row","Col","Form","Group","controlId","Check","inline","data-answer","Label","OptionStats_OptionStats","Question","state","md","stopPropagation","setState","target","getAttribute","handleSubmit","componentDidMount","getHasAuthedUserAnswered","withForm","_this$props3","_this$props3$withAvat","withAvatar","_this$props3$withDeta","withDetailsButton","_this$state","ListGroup","Item","Container","Option_Option","disabled","as","Questions","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isShowingAnswered","getFilteredQuestions","sortQuestions","filteredQuestions","filter","sort","b","handleFilterChange","value","bind","assertThisInitialized","isLoading","isValidUser","answered","unanswered","Card","Header","ToggleButtonGroup","defaultValue","onChange","ToggleButton","Badge","Body","Jumbotron","ListGroupItem","components_Question","Leaderboard","getNumCreated","getNumAnswered","getSum","sortUsersByNumQuestions","sum_a","_this2","index","QuestionDetail","match","params","question_id","Redirect","authorID","userName","Footer","NewQuestion","validated","handleTextarea1Change","handleTextarea2Change","onSubmit","Control","required","ButtonToolbar","PageNotFound","Login","redirectToReferrer","handleSelectUserChange","from","location","pathname","title","logoImg","DropdownButton","alignRight","onSelect","nameA","toUpperCase","nameB","Dropdown","eventKey","App","fluid","components_Navigation","build_default","showFastActions","Switch","App_PrivateRoute","path","component","Route","PrivateRoute","rest","objectWithoutProperties","assign","render","combineReducers","action","loadingBar","loadingBarReducer","applyMiddleware","thunk","Boolean","window","hostname","store","createStore","reducer","composeWithDevTools","ReactDOM","es","BrowserRouter","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67fd6231.chunk.js","sourcesContent":["let users = {\r\n    sarahedo: {\r\n        id: 'sarahedo',\r\n        name: 'Sarah Edo',\r\n        avatarURL: 'https://api.adorable.io/avatars/128/sarahedo.png',\r\n        bigAvatarURL: 'https://api.adorable.io/avatars/285/sarahedo.png',\r\n        answers: {\r\n            '8xf0y6ziyjabvozdd253nd': 'optionOne',\r\n            '6ni6ok3ym7mf1p33lnez': 'optionOne',\r\n            am8ehyc8byjqgar0jgpub9: 'optionTwo',\r\n            loxhs1bqm25b708cmbf3g: 'optionTwo'\r\n        },\r\n        questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']\r\n    },\r\n    tylermcginnis: {\r\n        id: 'tylermcginnis',\r\n        name: 'Tyler McGinnis',\r\n        avatarURL: 'https://api.adorable.io/avatars/128/tylermcginnis.png',\r\n        bigAvatarURL: 'https://api.adorable.io/avatars/285/tylermcginnis.png',\r\n        answers: {\r\n            vthrdm985a262al8qx3do: 'optionOne',\r\n            xj352vofupe1dqz9emx13r: 'optionTwo'\r\n        },\r\n        questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do']\r\n    },\r\n    johndoe: {\r\n        id: 'johndoe',\r\n        name: 'John Doe',\r\n        avatarURL: 'https://api.adorable.io/avatars/128/johndoe.png',\r\n        bigAvatarURL: 'https://api.adorable.io/avatars/285/johndoe.png',\r\n        answers: {\r\n            xj352vofupe1dqz9emx13r: 'optionOne',\r\n            vthrdm985a262al8qx3do: 'optionTwo',\r\n            '6ni6ok3ym7mf1p33lnez': 'optionOne'\r\n        },\r\n        questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r']\r\n    }\r\n}\r\n\r\nlet questions = {\r\n    '8xf0y6ziyjabvozdd253nd': {\r\n        id: '8xf0y6ziyjabvozdd253nd',\r\n        author: 'sarahedo',\r\n        timestamp: 1467166872634,\r\n        optionOne: {\r\n            votes: ['sarahedo'],\r\n            text: 'have horrible short term memory'\r\n        },\r\n        optionTwo: {\r\n            votes: [],\r\n            text: 'have horrible long term memory'\r\n        }\r\n    },\r\n    '6ni6ok3ym7mf1p33lnez': {\r\n        id: '6ni6ok3ym7mf1p33lnez',\r\n        author: 'johndoe',\r\n        timestamp: 1468479767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'become a superhero'\r\n        },\r\n        optionTwo: {\r\n            votes: ['johndoe', 'sarahedo'],\r\n            text: 'become a supervillian'\r\n        }\r\n    },\r\n    am8ehyc8byjqgar0jgpub9: {\r\n        id: 'am8ehyc8byjqgar0jgpub9',\r\n        author: 'sarahedo',\r\n        timestamp: 1488579767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'be telekinetic'\r\n        },\r\n        optionTwo: {\r\n            votes: ['sarahedo'],\r\n            text: 'be telepathic'\r\n        }\r\n    },\r\n    loxhs1bqm25b708cmbf3g: {\r\n        id: 'loxhs1bqm25b708cmbf3g',\r\n        author: 'tylermcginnis',\r\n        timestamp: 1482579767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'be a front-end developer'\r\n        },\r\n        optionTwo: {\r\n            votes: ['sarahedo'],\r\n            text: 'be a back-end developer'\r\n        }\r\n    },\r\n    vthrdm985a262al8qx3do: {\r\n        id: 'vthrdm985a262al8qx3do',\r\n        author: 'tylermcginnis',\r\n        timestamp: 1489579767190,\r\n        optionOne: {\r\n            votes: ['tylermcginnis'],\r\n            text: 'find $50 yourself'\r\n        },\r\n        optionTwo: {\r\n            votes: ['johndoe'],\r\n            text: 'have your best friend find $500'\r\n        }\r\n    },\r\n    xj352vofupe1dqz9emx13r: {\r\n        id: 'xj352vofupe1dqz9emx13r',\r\n        author: 'johndoe',\r\n        timestamp: 1493579767190,\r\n        optionOne: {\r\n            votes: ['johndoe'],\r\n            text: 'write JavaScript'\r\n        },\r\n        optionTwo: {\r\n            votes: ['tylermcginnis'],\r\n            text: 'write Swift'\r\n        }\r\n    }\r\n}\r\n\r\nfunction generateUID() {\r\n    return (\r\n        Math.random()\r\n            .toString(36)\r\n            .substring(2, 15) +\r\n        Math.random()\r\n            .toString(36)\r\n            .substring(2, 15)\r\n    )\r\n}\r\n\r\nexport function _getUsers() {\r\n    return new Promise((res, rej) => {\r\n        setTimeout(() => res({ ...users }), 1000)\r\n    })\r\n}\r\n\r\nexport function _getQuestions() {\r\n    return new Promise((res, rej) => {\r\n        setTimeout(() => res({ ...questions }), 1000)\r\n    })\r\n}\r\n\r\nfunction formatQuestion({ optionOneText, optionTwoText, author }) {\r\n    return {\r\n        id: generateUID(),\r\n        timestamp: Date.now(),\r\n        author,\r\n        optionOne: {\r\n            votes: [],\r\n            text: optionOneText\r\n        },\r\n        optionTwo: {\r\n            votes: [],\r\n            text: optionTwoText\r\n        }\r\n    }\r\n}\r\n\r\nexport function _saveQuestion(question) {\r\n    return new Promise((res, rej) => {\r\n        const authedUser = question.author\r\n        const formattedQuestion = formatQuestion(question)\r\n\r\n        setTimeout(() => {\r\n            questions = {\r\n                ...questions,\r\n                [formattedQuestion.id]: formattedQuestion\r\n            }\r\n\r\n            users = {\r\n                ...users,\r\n                [authedUser]: {\r\n                    ...users[authedUser],\r\n                    questions: users[authedUser].questions.concat([\r\n                        formattedQuestion.id\r\n                    ])\r\n                }\r\n            }\r\n\r\n            res(formattedQuestion)\r\n        }, 1000)\r\n    })\r\n}\r\n\r\nexport function _saveQuestionAnswer({ authedUser, qid, answer }) {\r\n    return new Promise((res, rej) => {\r\n        setTimeout(() => {\r\n            users = {\r\n                ...users,\r\n                [authedUser]: {\r\n                    ...users[authedUser],\r\n                    answers: {\r\n                        ...users[authedUser].answers,\r\n                        [qid]: answer\r\n                    }\r\n                }\r\n            }\r\n\r\n            questions = {\r\n                ...questions,\r\n                [qid]: {\r\n                    ...questions[qid],\r\n                    [answer]: {\r\n                        ...questions[qid][answer],\r\n                        votes: questions[qid][answer].votes.concat([authedUser])\r\n                    }\r\n                }\r\n            }\r\n\r\n            res()\r\n        }, 500)\r\n    })\r\n}\r\n","export const SET_AUTHED_USER = 'SET_AUTHED_USER'\r\n\r\nexport const setAuthedUser = (id) => ({\r\n    type: SET_AUTHED_USER,\r\n    id\r\n})\r\n\r\nexport const handleSetAuthedUser = (id) => {\r\n    return (dispatch) => {\r\n        dispatch(setAuthedUser(id))\r\n    }\r\n}\r\n","export const RECEIVE_USERS = 'RECEIVE_USERS'\r\nexport const UPDATE_USER_QUESTIONS = 'UPDATE_USER_QUESTIONS'\r\nexport const UPDATE_USER_ANSWERS = 'UPDATE_USER_ANSWERS'\r\n\r\nexport const receiveUsers = (users) => ({\r\n    type: RECEIVE_USERS,\r\n    users\r\n})\r\n\r\nconst updateUserQuestions = (question) => ({\r\n    type: UPDATE_USER_QUESTIONS,\r\n    question\r\n})\r\n\r\nconst updateUserAnswers = (authedUserID, question, answer) => ({\r\n    type: UPDATE_USER_ANSWERS,\r\n    uid: authedUserID,\r\n    qid: question.id,\r\n    answer\r\n})\r\n\r\nexport const handleUpdateUserQuestions = (question) => {\r\n    return (dispatch) => {\r\n        dispatch(updateUserQuestions(question))\r\n    }\r\n}\r\n\r\nexport const handleUpdateUserAnswers = (authedUserID, question, answer ) => {\r\n    return (dispatch) => {\r\n        dispatch(updateUserAnswers(authedUserID, question, answer))\r\n    }\r\n}","import { _saveQuestion, _saveQuestionAnswer } from '../api/_DATA'\r\nimport { handleUpdateUserQuestions, handleUpdateUserAnswers } from './users'\r\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\r\n\r\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS'\r\nexport const SAVE_QUESTION = 'SAVE_QUESTION'\r\nexport const SAVE_QUESTION_ANSWER = 'SAVE_QUESTION_ANSWER'\r\n\r\nexport const receiveQuestions = (questions) => ({\r\n    type: RECEIVE_QUESTIONS,\r\n    questions\r\n})\r\n\r\nexport const saveQuestion = (question) => ({\r\n    type: SAVE_QUESTION,\r\n    question\r\n})\r\n\r\nexport const saveQuestionAnswer = (authedUserID, question, answer) => ({\r\n    type: SAVE_QUESTION_ANSWER,\r\n    uid: authedUserID,\r\n    qid: question.id,\r\n    answer\r\n})\r\n\r\nexport const handleSaveQuestionAnswer = (authedUserID, question, answer) => {\r\n    return async (dispatch) => {\r\n        dispatch(showLoading())\r\n\r\n        try {\r\n            // API call\r\n            await _saveQuestionAnswer({\r\n                authedUser: authedUserID,\r\n                qid: question.id,\r\n                answer\r\n            })\r\n\r\n            // Update state\r\n            await dispatch(saveQuestionAnswer(authedUserID, question, answer))\r\n            await dispatch(handleUpdateUserAnswers(authedUserID, question, answer))\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n\r\n        dispatch(hideLoading())\r\n    }\r\n}\r\n\r\nexport const handleAddQuestion = (question) => {\r\n    return async (dispatch) => {\r\n        dispatch(showLoading())\r\n        try {\r\n            const newQuestion = await _saveQuestion(question) // api call\r\n            await dispatch(saveQuestion(newQuestion)) // dispatch the action\r\n            await dispatch(handleUpdateUserQuestions(newQuestion)) // add the question to the user\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n        dispatch(hideLoading())\r\n    }\r\n}\r\n","import { _getUsers, _getQuestions } from '../api/_DATA'\r\nimport { setAuthedUser } from './authedUser'\r\nimport { receiveUsers } from './users'\r\nimport { receiveQuestions } from './questions'\r\nimport { showLoading, hideLoading } from 'react-redux-loading-bar'\r\n\r\nexport const handleInitialData = () => {\r\n    const getUsersAndQuestions = async () => {\r\n        const [users, questions] = await Promise.all([\r\n            _getUsers(),\r\n            _getQuestions()\r\n        ])\r\n        return [users, questions]\r\n    }\r\n\r\n    return async (dispatch) => {\r\n        const AUTHED_USER_ID = ''\r\n        \r\n        dispatch(showLoading())\r\n        const [users, questions] = await getUsersAndQuestions()\r\n        dispatch(receiveUsers(users))\r\n        dispatch(receiveQuestions(questions))\r\n        dispatch(setAuthedUser(AUTHED_USER_ID))\r\n        dispatch(hideLoading())\r\n    }\r\n}\r\n","export const getUser = (userID = '', users) => {\r\n    const user = users[userID]\r\n    return user ? user : undefined\r\n}\r\n\r\nexport const getAvatar = (user) => {\r\n    return user ? user.avatarURL : ''\r\n}\r\n\r\nexport const getUserName = (user, otherID) => {\r\n    const id = user ? user.id : null\r\n\r\n    if (id && otherID && id === otherID) {\r\n        return 'You'\r\n    } else {\r\n        return user ? user.name : ''\r\n    }\r\n}\r\n\r\nexport const getArrayFromObj = (obj) => {\r\n    return Object.keys(obj).map((key) => obj[key])\r\n}\r\n\r\nexport const isAuthedUsersAnswer = (option, authedUserID = '') => {\r\n    return option.votes.includes(authedUserID)\r\n}\r\n\r\nexport const isEmptyObj = (obj) => {\r\n    return Object.keys(obj).length === 0 && obj.constructor === Object\r\n}\r\n\r\nexport const isValidUserID = (userID) => {\r\n    return !(isEmptyObj(userID) || userID === '')\r\n}\r\n","import React, { Component } from 'react'\r\nimport { getAvatar, getUserName } from '../utils'\r\n\r\nexport default class Avatar extends Component {\r\n    render() {\r\n        const { user, className = '' } = this.props\r\n\r\n        return (\r\n            <img\r\n                src={getAvatar(user)}\r\n                alt={getUserName(user)}\r\n                className={`avatar ${className}`}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getUser, getUserName } from '../utils'\r\nimport Avatar from './Avatar'\r\nimport { Button } from 'react-bootstrap'\r\nimport { handleSetAuthedUser } from '../actions/authedUser'\r\nimport { withRouter } from 'react-router-dom'\r\nclass Welcome extends Component {\r\n    handleLogout = (e) => {\r\n        e.preventDefault()\r\n        const { dispatch, history } = this.props\r\n        dispatch(handleSetAuthedUser(''))\r\n        history.push(\"/\")\r\n    }\r\n\r\n    render() {\r\n        const { authedUser, authedUserID } = this.props\r\n\r\n        if(!this.props || this.props.authedUser === undefined) return null\r\n\r\n        return (\r\n            <Fragment>\r\n                {authedUserID && (\r\n                    <div className=\"welcome d-flex justify-content-end align-items-center\">\r\n                        <span>\r\n                            Welcome,\r\n                            <Avatar\r\n                                className=\"welcome-avatar md\"\r\n                                user={authedUser}\r\n                            />\r\n                            {getUserName(authedUser)}\r\n                        </span>\r\n                        <span>\r\n                            <Button size=\"sm\" onClick={this.handleLogout}>Logout</Button>\r\n                        </span>\r\n                    </div>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ authedUser, users }) => {\r\n    return {\r\n        authedUser: getUser(authedUser, users),\r\n        authedUserID: authedUser !== '' ? authedUser : undefined // This will make for a more straightforward conditional above\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Welcome))\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Welcome from './Welcome'\r\nimport { Navbar, Nav } from 'react-bootstrap'\r\nimport { getUser } from '../utils'\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        const { authedUser } = this.props\r\n\r\n        return (\r\n            <Navbar variant=\"dark\" bg=\"dark\" collapseOnSelect expand=\"sm\" className=\"mb-0\">\r\n                <Navbar.Toggle />\r\n                <Navbar.Collapse>\r\n                    <Nav>\r\n                        <LinkContainer exact={true} to=\"/\">\r\n                            <Nav.Link active={false} className=\"py-0\">Home</Nav.Link>\r\n                        </LinkContainer>\r\n                        <LinkContainer to=\"/add\">\r\n                            <Nav.Link active={false} className=\"py-0 text-nowrap\">\r\n                                New Question\r\n                            </Nav.Link>\r\n                        </LinkContainer>\r\n                        <LinkContainer to=\"/leaderboard\">\r\n                            <Nav.Link active={false} className=\"py-0\">Leaderboard</Nav.Link>\r\n                        </LinkContainer>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Nav>\r\n                    {authedUser && <Welcome />}\r\n                </Nav>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ authedUser, users }) => {\r\n    return {\r\n        authedUser: getUser(authedUser, users),\r\n        authedUserID: authedUser !== '' ? authedUser : undefined // This will make for a more straightforward conditional above\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Navigation))","import React, { Component } from 'react'\r\nimport { getArrayFromObj } from '../utils'\r\n\r\nexport default class OptionStats extends Component {\r\n    render() {\r\n        const { option, users } = this.props\r\n\r\n        const totalNumPeople = getArrayFromObj(users).length\r\n        const numOptionVotes = option.votes.length\r\n\r\n        const percentage = Math.floor((100 * numOptionVotes) / totalNumPeople)\r\n\r\n        return (\r\n            <ul className=\"pl-0\">\r\n                {/* Stats\r\n                        the number of people who voted for that option\r\n                        the percentage of people who voted for that option */}\r\n                <li className=\"asked\">\r\n                    <span className=\"callout\">{numOptionVotes}</span>{' '}\r\n                    {numOptionVotes > 1 || numOptionVotes === 0\r\n                        ? 'people '\r\n                        : 'person '}{' '}\r\n                    chose this option.\r\n                </li>\r\n                <li className=\"answered\">\r\n                    <span className=\"callout\">{percentage}%</span> voted for\r\n                    this option.\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { Form, Row, Col } from 'react-bootstrap'\r\nimport OptionStats from './OptionStats'\r\n\r\nexport default class Option extends Component {\r\n    render() {\r\n        const {\r\n            question,\r\n            answer,\r\n            users,\r\n            showForm,\r\n            option,\r\n            hasAuthedUserAnswered,\r\n            handleRadioBtnClick,\r\n            getOptionCheckbox\r\n        } = this.props\r\n\r\n        return (\r\n            <Fragment>\r\n                <Row>\r\n                    <Col>\r\n                        <h5 className=\"mb-0\">\r\n                            <Form.Group\r\n                                className=\"mb-0 flex-nowrap\"\r\n                                controlId={`form-${answer}-${question.id}`}\r\n                            >\r\n                                {showForm ? (\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        name=\"questionOption\"\r\n                                        inline\r\n                                        className=\"mr-1\"\r\n                                        data-answer={answer}\r\n                                        onClick={handleRadioBtnClick}\r\n                                    />\r\n                                ) : (\r\n                                    hasAuthedUserAnswered && getOptionCheckbox(option)\r\n                                )}\r\n\r\n                                <Form.Label>{option.text}</Form.Label>\r\n                            </Form.Group>\r\n                        </h5>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/* Option Stats */}\r\n                {users && (\r\n                    <Row className=\"my-0\">\r\n                        <Col>\r\n                            <OptionStats option={option} users={users} />\r\n                        </Col>\r\n                    </Row>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { isAuthedUsersAnswer, isValidUserID } from '../utils'\r\nimport { MdCheckBox, MdCheckBoxOutlineBlank } from 'react-icons/md'\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { getUser, getUserName } from '../utils'\r\nimport { handleSaveQuestionAnswer } from '../actions/questions'\r\nimport Avatar from './Avatar'\r\nimport Option from './Option'\r\n\r\nclass Question extends Component {\r\n    state = {\r\n        hasAuthedUserAnswered: false,\r\n        showForm: false,\r\n        answer: null\r\n    }\r\n\r\n    getOptionCheckbox = (option) => {\r\n        const { authedUserID } = this.props\r\n\r\n        return isAuthedUsersAnswer(option, authedUserID) ? (\r\n            <MdCheckBox className=\"option-checkbox checked\" />\r\n        ) : (\r\n            <MdCheckBoxOutlineBlank className=\"option-checkbox text-muted\" />\r\n        )\r\n    }\r\n\r\n    handleRadioBtnClick = (e) => {\r\n        e.stopPropagation()\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            answer: e.target.getAttribute('data-answer')\r\n        })\r\n    }\r\n\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n\r\n        const { authedUserID, question, dispatch } = this.props\r\n        const { answer } = this.state\r\n\r\n        await dispatch(handleSaveQuestionAnswer(authedUserID, question, answer))\r\n        this.setState({\r\n            hasAuthedUserAnswered: true,\r\n            showForm: false,\r\n            answer: null\r\n        })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const { authedUserID, question } = this.props\r\n\r\n        const hasAuthedUserAnswered = this.getHasAuthedUserAnswered(question)\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            showForm:\r\n                authedUserID && !hasAuthedUserAnswered && this.props.withForm,\r\n            hasAuthedUserAnswered\r\n        })\r\n    }\r\n\r\n    getHasAuthedUserAnswered = (question) => {\r\n        const { optionOne, optionTwo } = question\r\n        const { authedUserID } = this.props\r\n\r\n        return (\r\n            isAuthedUsersAnswer(optionOne, authedUserID) ||\r\n            isAuthedUsersAnswer(optionTwo, authedUserID)\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            authedUserID,\r\n            question,\r\n            users,\r\n            withAvatar = false,\r\n            withDetailsButton = false\r\n        } = this.props\r\n\r\n        const { answer, showForm } = this.state\r\n\r\n        const hasAuthedUserAnswered = this.getHasAuthedUserAnswered(question)\r\n\r\n        const user = getUser(question.author, users)\r\n\r\n        return (\r\n            <ListGroup.Item>\r\n                <Container className=\"question\" key={question.id}>\r\n                    {/* Avatar */}\r\n                    {withAvatar && (\r\n                        <Fragment>\r\n                            <Row className=\"dflex align-items-center text-left mb-1\">\r\n                                <Avatar className=\"mr-1 sm\" user={user} />{' '}\r\n                                {getUserName(user, authedUserID)} asked\r\n                            </Row>\r\n                            <Row className=\"dflex text-left mb-3 text-secondary\">\r\n                                <h5 className=\"text-secondary\">\r\n                                    Would you rather?\r\n                                </h5>\r\n                            </Row>\r\n                        </Fragment>\r\n                    )}\r\n\r\n                    <Form>\r\n                        <Row>\r\n                            {/* Option One */}\r\n                            <Col md={5}>\r\n                                <Option\r\n                                    question={question}\r\n                                    users={users}\r\n                                    showForm={showForm}\r\n                                    option={question.optionOne}\r\n                                    answer={'optionOne'}\r\n                                    hasAuthedUserAnswered={\r\n                                        hasAuthedUserAnswered\r\n                                    }\r\n                                    handleRadioBtnClick={\r\n                                        this.handleRadioBtnClick\r\n                                    }\r\n                                    getOptionCheckbox={this.getOptionCheckbox}\r\n                                />\r\n                            </Col>\r\n\r\n                            {/* Or */}\r\n                            <Col\r\n                                md={1}\r\n                                className=\"d-flex justify-content-center\"\r\n                            >\r\n                                <h5 className=\"text-secondary\">or</h5>\r\n                            </Col>\r\n\r\n                            {/* Option Two */}\r\n                            <Col md={6}>\r\n                                <Option\r\n                                    question={question}\r\n                                    users={users}\r\n                                    showForm={showForm}\r\n                                    option={question.optionTwo}\r\n                                    answer={'optionTwo'}\r\n                                    hasAuthedUserAnswered={\r\n                                        hasAuthedUserAnswered\r\n                                    }\r\n                                    handleRadioBtnClick={\r\n                                        this.handleRadioBtnClick\r\n                                    }\r\n                                    getOptionCheckbox={this.getOptionCheckbox}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n\r\n                    {/* Save Answer Button */}\r\n                    {showForm && (\r\n                        <div className=\"text-center\">\r\n                            <Button\r\n                                onClick={this.handleSubmit}\r\n                                variant=\"success\"\r\n                                className=\"btn-sm btn-block\"\r\n                                disabled={!answer}\r\n                            >\r\n                                Save Answer\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Detail Page Button */}\r\n                    {!showForm &&\r\n                        isValidUserID(authedUserID) &&\r\n                        withDetailsButton && (\r\n                            <div className=\"text-center\">\r\n                                <Button\r\n                                    variant={\r\n                                        hasAuthedUserAnswered\r\n                                            ? 'primary'\r\n                                            : 'success'\r\n                                    }\r\n                                    className=\"btn-sm btn-block\"\r\n                                    as={Link}\r\n                                    to={`/questions/${question.id}`}\r\n                                >\r\n                                    {hasAuthedUserAnswered\r\n                                        ? 'View Details'\r\n                                        : 'Answer Question'}\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                </Container>\r\n            </ListGroup.Item>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser, users }) {\r\n    return {\r\n        authedUserID: authedUser,\r\n        authedUser: getUser(authedUser, users),\r\n        users\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Question))\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Question from './Question'\r\nimport { getArrayFromObj, isAuthedUsersAnswer, isValidUserID } from '../utils'\r\nimport {\r\n    Badge,\r\n    Card,\r\n    Jumbotron,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    ToggleButtonGroup,\r\n    ToggleButton\r\n} from 'react-bootstrap'\r\n\r\nclass Questions extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleFilterChange = this.handleFilterChange.bind(this)\r\n    }\r\n\r\n    state = {\r\n        isShowingAnswered: false\r\n    }\r\n\r\n    getFilteredQuestions = (isShowingAnswered = false) => {\r\n        const { authedUserID, questions } = this.props\r\n\r\n        if(!isValidUserID(authedUserID)){\r\n            return this.sortQuestions(getArrayFromObj(questions))\r\n        }\r\n\r\n        const filteredQuestions = getArrayFromObj(questions).filter(\r\n            (question) =>\r\n                isShowingAnswered ===\r\n                (isAuthedUsersAnswer(question.optionOne, authedUserID) ||\r\n                    isAuthedUsersAnswer(question.optionTwo, authedUserID))\r\n        )\r\n\r\n        return this.sortQuestions(filteredQuestions)\r\n    }\r\n\r\n    sortQuestions = (questions) => {\r\n        return questions.sort((a, b) => b.timestamp - a.timestamp)\r\n    }\r\n\r\n    handleFilterChange = (value) => {\r\n        this.setState({\r\n            ...this.state,\r\n            isShowingAnswered: value ? false : true // relying on truthiness\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { authedUserID, questions, isLoading } = this.props\r\n        const { isShowingAnswered } = this.state\r\n\r\n        const isValidUser = isValidUserID(authedUserID)\r\n        const answered = this.getFilteredQuestions(true)\r\n        const unanswered = this.getFilteredQuestions(false)\r\n\r\n        return (\r\n            <Card className=\"questions mb-3 mx-3\">\r\n                {isValidUser && (\r\n                    <Card.Header className=\"text-center\">\r\n                        <ToggleButtonGroup\r\n                            className=\"mb-1\"\r\n                            name=\"toggleAnswered\"\r\n                            value={isShowingAnswered ? 0 : 1}\r\n                            defaultValue={1}\r\n                            onChange={this.handleFilterChange}\r\n                        >\r\n                            <ToggleButton type=\"radio\" value={1}>\r\n                                Unanswered{' '}\r\n                                <Badge variant=\"light\">\r\n                                    {unanswered.length}\r\n                                </Badge>\r\n                            </ToggleButton>\r\n                            <ToggleButton type=\"radio\" value={0}>\r\n                                Answered{' '}\r\n                                <Badge variant=\"light\">{answered.length}</Badge>\r\n                            </ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </Card.Header>\r\n                )}\r\n\r\n                {isValidUser &&\r\n                    unanswered.length === 0 &&\r\n                    !isShowingAnswered &&\r\n                    Object.keys(questions).length > 0 && (\r\n                        <Card.Body>\r\n                            <Jumbotron className=\"text-center\">\r\n                                <h2>You've answered all of the questions!</h2>\r\n                            </Jumbotron>\r\n                        </Card.Body>\r\n                    )}\r\n\r\n                {isValidUser &&\r\n                    answered.length === 0 &&\r\n                    isShowingAnswered &&\r\n                    Object.keys(questions).length > 0 && (\r\n                        <Card.Body>\r\n                            <Jumbotron className=\"text-center\">\r\n                                <h2>You haven't answered any questions yet!</h2>\r\n                            </Jumbotron>\r\n                        </Card.Body>\r\n                    )}\r\n\r\n                {isLoading && <div className=\"loader\" />}\r\n\r\n                <ListGroup variant=\"flush\">\r\n                    {questions &&\r\n                        this.getFilteredQuestions(isShowingAnswered).map(\r\n                            (question) => (\r\n                                <ListGroupItem key={question.id}>\r\n                                    <Question\r\n                                        authedUserID={authedUserID}\r\n                                        question={question}\r\n                                        withDetailsButton={true}\r\n                                        withAvatar={true}\r\n                                    />\r\n                                </ListGroupItem>\r\n                            )\r\n                        )}\r\n                </ListGroup>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser, questions }) {\r\n    return {\r\n        authedUserID: authedUser,\r\n        questions\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Questions)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { MdStar } from 'react-icons/md'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { getUserName, getArrayFromObj } from '../utils'\r\nimport Avatar from './Avatar'\r\nimport { Badge, Card, ListGroup } from 'react-bootstrap'\r\n\r\nclass Leaderboard extends Component {\r\n    getNumCreated = (user) => user.questions.length\r\n    getNumAnswered = (user) => getArrayFromObj(user.answers).length\r\n    getSum = (user) => this.getNumCreated(user) + this.getNumAnswered(user)\r\n\r\n    sortUsersByNumQuestions = () => {\r\n        const { users } = this.props\r\n        // Users are ordered in descending order based on the sum of the number of questions they’ve answered and the number of questions they’ve asked.\r\n        const sorted = getArrayFromObj(users).sort((a, b) => {\r\n            const sum_a = this.getSum(a)\r\n            const sum_b = this.getSum(b)\r\n\r\n            return sum_b - sum_a\r\n        })\r\n\r\n        return sorted\r\n    }\r\n\r\n    render() {\r\n        const { authedUserID } = this.props\r\n\r\n        return (\r\n            <Card className=\"mb-3 mx-3\">\r\n                <Card.Header>\r\n                    <h4 className=\"mb-0\">Leaderboard</h4>\r\n                </Card.Header>\r\n                <ListGroup className=\"leaderboard-user\" variant=\"flush\">\r\n                    {this.sortUsersByNumQuestions().map((user, index) => (\r\n                        <ListGroup.Item\r\n                            key={user.id}\r\n                            className={\r\n                                authedUserID === user.id ? 'currentUser' : ''\r\n                            }\r\n                        >\r\n                            <div className=\"rank d-flex align-items-center\">\r\n                                <h2>{index + 1}</h2>\r\n                            </div>\r\n                            <Avatar\r\n                                className=\"leaderboard-avatar lg\"\r\n                                user={user}\r\n                            />\r\n                            <div className=\"username\">{getUserName(user)}</div>\r\n                            <div className=\"asked\">\r\n                                <span className=\"callout\">\r\n                                    {this.getNumCreated(user)}\r\n                                </span>{' '}\r\n                                asked\r\n                            </div>\r\n                            <div className=\"answered\">\r\n                                <span className=\"callout\">\r\n                                    {this.getNumAnswered(user)}\r\n                                </span>{' '}\r\n                                answered\r\n                            </div>\r\n                            <div className=\"score\">\r\n                                {index === 0 && <MdStar className=\"star\" />}\r\n                                <Badge variant=\"primary\">\r\n                                    <span className=\"micro\">SCORE</span>\r\n                                    <hr />\r\n                                    <h1>{this.getSum(user)}</h1>\r\n                                </Badge>\r\n                            </div>\r\n                        </ListGroup.Item>\r\n                    ))}\r\n                </ListGroup>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ authedUser, users }) => {\r\n    return {\r\n        authedUserID: authedUser,\r\n        users\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Leaderboard))\r\n","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect, withRouter } from 'react-router-dom'\r\nimport { Card } from 'react-bootstrap'\r\nimport Avatar from './Avatar'\r\nimport Question from './Question'\r\nimport { getUser, getUserName } from '../utils'\r\n\r\nclass QuestionDetail extends Component {\r\n    render() {\r\n        const {\r\n            authedUserID,\r\n            questions,\r\n            users,\r\n            match: { params }\r\n        } = this.props\r\n\r\n        // Get question and author (not to be confused with the authenticated user)\r\n        const question = questions[params.question_id]\r\n\r\n        if(question === undefined) return <Redirect to=\"/404\" />\r\n\r\n        const authorID = question ? question.author : ''\r\n        const author = getUser(authorID, users)\r\n        const userName = getUserName(author, authedUserID)\r\n\r\n        return (\r\n            <Fragment>\r\n                <Card className=\"question mb-3 mx-3\">\r\n                    {question && (\r\n                        <Question\r\n                            authedUserID={authedUserID}\r\n                            users={users}\r\n                            question={question}\r\n                            withForm={true}\r\n                        />\r\n                    )}\r\n                    <Card.Footer>\r\n                        <div>\r\n                            <Avatar\r\n                                className=\"question-detail-avatar md\"\r\n                                user={author}\r\n                            />\r\n                            <span>{userName} created this question</span>\r\n                        </div>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ authedUser, users, questions }) => {\r\n    return {\r\n        authedUserID: authedUser,\r\n        authedUser: getUser(authedUser, users),\r\n        users,\r\n        questions\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(QuestionDetail))\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Button, ButtonToolbar, Container, Form, Card } from 'react-bootstrap'\r\nimport { getUser } from '../utils'\r\nimport { handleAddQuestion } from '../actions/questions'\r\n\r\nclass NewQuestion extends Component {\r\n    // Do I even need this?\r\n    state = {\r\n        validated: false,\r\n        optionOneText: '',\r\n        optionTwoText: ''\r\n    }\r\n\r\n    handleTextarea1Change = (e) => {\r\n        this.setState({\r\n            ...this.state,\r\n            optionOneText: e.target.value\r\n        })\r\n    }\r\n\r\n    handleTextarea2Change = (e) => {\r\n        this.setState({\r\n            ...this.state,\r\n            optionTwoText: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n\r\n        const { dispatch, authedUserID, history } = this.props\r\n        const { optionOneText, optionTwoText } = this.state\r\n\r\n        const question = {\r\n            author: authedUserID,\r\n            optionOneText,\r\n            optionTwoText\r\n        }\r\n\r\n        await dispatch(handleAddQuestion(question, history))\r\n        history.push(\"/\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <h4 className=\"mb-0\">Add a new question</h4>\r\n                    </Card.Header>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Card.Body>\r\n                            <Form.Group controlId=\"poll-option-1\">\r\n                                <Form.Label>Option 1</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    required\r\n                                    onChange={this.handleTextarea1Change}\r\n                                />\r\n                            </Form.Group>\r\n                            <h5 className=\"text-muted text-center\">or</h5>\r\n                            <Form.Group controlId=\"poll-option-2\">\r\n                                <Form.Label>Option 2</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    required\r\n                                    onChange={this.handleTextarea2Change}\r\n                                />\r\n                            </Form.Group>\r\n                        </Card.Body>\r\n                        <Card.Footer>\r\n                            <ButtonToolbar className=\"justify-content-center\">\r\n                                <Button type=\"submit\" className=\"mx-1\">\r\n                                    Save Question\r\n                                </Button>\r\n                                {/* <Button className=\"mx-1\" variant=\"secondary\">\r\n                                    Cancel\r\n                                </Button> */}\r\n                            </ButtonToolbar>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ authedUser, users }) => {\r\n    return {\r\n        authedUserID: authedUser,\r\n        user: getUser(authedUser, users)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NewQuestion)\r\n","import React, { Component } from 'react'\r\nimport { Jumbotron } from 'react-bootstrap'\r\n\r\nexport default class PageNotFound extends Component {\r\n    render() {\r\n        return (\r\n            <Jumbotron className=\"m-3\">\r\n                <span className=\"text-danger\">Error</span>{' '}\r\n                <span className=\"display-1 text-danger\">404</span>\r\n                <hr />\r\n                <p className=\"display-4\">\r\n                    There was an error getting the requested URL.\r\n                </p>\r\n            </Jumbotron>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { Card, Container } from 'react-bootstrap'\r\nimport { getArrayFromObj, getUser } from '../utils'\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap'\r\nimport { handleSetAuthedUser } from '../actions/authedUser'\r\nimport Avatar from './Avatar'\r\nclass Login extends Component {\r\n    state = {\r\n        redirectToReferrer: false\r\n    }\r\n\r\n    handleSelectUserChange = async (value) => {\r\n        const { dispatch } = this.props\r\n        await dispatch(handleSetAuthedUser(value))\r\n        this.setState({\r\n            redirectToReferrer: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { from } = this.props.location.state || { from: { pathname: \"/\" }}\r\n        const { users, user } = this.props\r\n        const { redirectToReferrer } = this.state\r\n\r\n        if(redirectToReferrer === true) {\r\n            return <Redirect to={from} />\r\n        }\r\n\r\n        const title = user ? user.name : 'Log in as '\r\n\r\n        const logoImg = user ? user.bigAvatarURL : \"https://api.adorable.io/avatars/285/abott@adorable.png\"\r\n\r\n        return (\r\n            <Container>\r\n                <Card>\r\n                    <Card.Body className=\"text-center\">\r\n                        <div className=\"logo\">\r\n                            <div className=\"question-mark left\">?</div>\r\n                            <div className=\"question-mark right\">?</div>\r\n                            <img\r\n                                alt=\"logo\"\r\n                                className=\"login-face m-3\"\r\n                                src={logoImg}\r\n                            />\r\n                        </div>\r\n\r\n                        <DropdownButton\r\n                            id=\"dropdown-users\"\r\n                            variant=\"success btn-lg\"\r\n                            alignRight={true}\r\n                            title={title}\r\n                            onSelect={this.handleSelectUserChange}\r\n                        >\r\n                            {users &&\r\n                                getArrayFromObj(users)\r\n                                    .sort((a, b) => {\r\n                                        const nameA = a.name.toUpperCase()\r\n                                        const nameB = b.name.toUpperCase()\r\n                                        return nameA < nameB\r\n                                            ? -1\r\n                                            : nameA > nameB\r\n                                            ? 1\r\n                                            : 0\r\n                                    })\r\n                                    .map((user) => (\r\n                                        <Dropdown.Item\r\n                                            active={false}\r\n                                            key={user.id}\r\n                                            eventKey={user.id}\r\n                                        >\r\n                                            <Avatar\r\n                                                className={\r\n                                                    'dropdown-user-avatar sm'\r\n                                                }\r\n                                                user={user}\r\n                                            />{' '}\r\n                                            {user.name}\r\n                                        </Dropdown.Item>\r\n                                    ))}\r\n                        </DropdownButton>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser, users }) {\r\n    return {\r\n        authedUserID: authedUser,\r\n        user: getUser(authedUser, users),\r\n        users\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Login))\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Container } from 'react-bootstrap'\r\nimport { Route, withRouter, Redirect, Switch } from 'react-router-dom'\r\nimport LoadingBar from 'react-redux-loading-bar'\r\nimport '../App.css'\r\nimport { handleInitialData } from '../actions/shared'\r\nimport Navigation from './Navigation'\r\nimport Questions from './Questions'\r\nimport Leaderboard from './Leaderboard'\r\nimport QuestionDetail from './QuestionDetail'\r\nimport NewQuestion from './NewQuestion'\r\nimport PageNotFound from './PageNotFound'\r\nimport Login from './Login'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        isLoading: true\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.props.dispatch(handleInitialData())\r\n        this.setState({\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { authedUser } = this.props\r\n\r\n        return (\r\n            <Container fluid className=\"px-0 pb-1 mx-0\">\r\n                <Navigation />\r\n                <LoadingBar className=\"loading\" showFastActions />\r\n\r\n                <h3 className=\"d-flex justify-content-center text-white mt-2\">\r\n                    Would you rather?\r\n                </h3>\r\n\r\n                <Switch>\r\n                    <PrivateRoute\r\n                        path=\"/\"\r\n                        exact\r\n                        component={Questions}\r\n                        authedUser={authedUser}\r\n                    />\r\n    \r\n                    <Route path=\"/login\" component={Login} />\r\n    \r\n                    <PrivateRoute\r\n                        path=\"/add\"\r\n                        component={NewQuestion}\r\n                        authedUser={authedUser}\r\n                    />\r\n    \r\n                    <PrivateRoute\r\n                        path=\"/leaderboard\"\r\n                        component={Leaderboard}\r\n                        authedUser={authedUser}\r\n                    />\r\n    \r\n                    {/* TODO: The path should be questions/:question_id */}\r\n                    <PrivateRoute\r\n                        path=\"/questions/:question_id\"\r\n                        component={QuestionDetail}\r\n                        authedUser={authedUser}\r\n                    />\r\n    \r\n                    <Route path=\"/404\" component={PageNotFound} />\r\n\r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                const { authedUser } = { ...rest }\r\n\r\n                return typeof authedUser === 'string' &&\r\n                    authedUser.length > 0 ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: '/login',\r\n                            state: { from: props.location }\r\n                        }}\r\n                    />\r\n                )\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ authedUser }) => {\r\n    return {\r\n        authedUser\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(App))\r\n","import { combineReducers } from 'redux'\r\nimport { loadingBarReducer } from 'react-redux-loading-bar'\r\nimport users from './users'\r\nimport questions from './questions'\r\nimport authedUser from './authedUser'\r\n\r\nexport default combineReducers({\r\n    users,\r\n    questions,\r\n    authedUser,\r\n    loadingBar: loadingBarReducer\r\n})\r\n","import { RECEIVE_USERS, UPDATE_USER_QUESTIONS, UPDATE_USER_ANSWERS } from '../actions/users'\r\n\r\nexport default function users(state = {}, action) {\r\n    switch (action.type) {\r\n        case RECEIVE_USERS:\r\n            return {\r\n                ...state,\r\n                ...action.users\r\n            }\r\n\r\n        case UPDATE_USER_QUESTIONS:\r\n            const { question } = action\r\n\r\n            return {\r\n                ...state,\r\n                [question.author]: {\r\n                    ...state[question.author],\r\n                    questions: state[question.author].questions.concat([question.id])\r\n                }\r\n            }\r\n\r\n        case UPDATE_USER_ANSWERS:\r\n            const { qid, uid, answer } = action\r\n\r\n            return {\r\n                ...state,\r\n                [uid]: {\r\n                    ...state[uid],\r\n                    answers: {\r\n                        ...state[uid].answers,\r\n                        [qid]: answer\r\n                    }\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    RECEIVE_QUESTIONS,\r\n    SAVE_QUESTION,\r\n    SAVE_QUESTION_ANSWER\r\n} from '../actions/questions'\r\n\r\nexport default function questions(state = {}, action) {\r\n    switch (action.type) {\r\n        case RECEIVE_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                ...action.questions\r\n            }\r\n\r\n        case SAVE_QUESTION:\r\n            const { question } = action\r\n\r\n            return {\r\n                ...state, // state.questions\r\n                [question.id]: question\r\n            }\r\n\r\n        case SAVE_QUESTION_ANSWER:\r\n            const { uid, qid, answer } = action\r\n\r\n            return {\r\n                ...state, // state.questions\r\n                [qid]: {\r\n                    ...state[qid],\r\n                    [answer]: {\r\n                        ...state[qid][answer],\r\n                        votes: state[qid][answer].votes.concat([uid])\r\n                    }\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { SET_AUTHED_USER } from '../actions/authedUser'\r\n\r\nexport default function authedUser(state = {}, action) {\r\n    switch (action.type) {\r\n        case SET_AUTHED_USER:\r\n            return action.id\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\n\r\nexport default applyMiddleware(\r\n    thunk,\r\n    // logger\r\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reducer from './reducers'\r\nimport applyMiddleware from './middleware'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware))\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}